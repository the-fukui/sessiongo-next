import type { GetStaticPropsContext, InferGetStaticPropsType } from 'next'
import Head from 'next/head'
import styles from '../styles/Top.module.scss'
import Login from '@web/components/Login'
import Calendar from '@web/components/Calendar'
import { getSessionList } from '@web/usecases/topUsecase'
import { useState } from 'react'
import dayjs from 'dayjs'

type ContainerProps = InferGetStaticPropsType<typeof getStaticProps>
type Props = ReturnType<typeof useContainer>

const Presenter: React.VFC<Props> = ({
  dislaySessionList,
  eventDates,
  onClickCalendarDay,
}) => (
  <div className={styles.container}>
    <Head>
      <title>Create Next App</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Login />
    <Calendar eventDates={eventDates} onClickDay={onClickCalendarDay} />
    {JSON.stringify(dislaySessionList)}
  </div>
)

const useContainer = (props: ContainerProps) => {
  const { sessionList } = props
  const [dislaySessionList, setDisplaySessionList] =
    useState<typeof sessionList>()
  const eventDates = sessionList.map((session) => session.startAt)
  const onClickCalendarDay = (value: Date) => {
    const sessionsOfTheDay = sessionList.filter((session) =>
      dayjs.unix(session.startAt).isSame(dayjs(value), 'day'),
    )
    setDisplaySessionList(sessionsOfTheDay)
  }

  const presenterProps = {
    eventDates,
    onClickCalendarDay,
    dislaySessionList,
  }

  return {
    ...props,
    ...presenterProps,
  }
}

export const getStaticProps = async (ctx: GetStaticPropsContext) => {
  const sessionList = await getSessionList()

  return {
    props: {
      sessionList,
    },
    revalidate: 1,
  }
}

export default function Index(props: ContainerProps) {
  return <Presenter {...useContainer(props)} />
}
